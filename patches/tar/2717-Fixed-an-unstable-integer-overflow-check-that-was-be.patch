From 29dbfc1b5c79b536402c5dacdee8eb69a433f373 Mon Sep 17 00:00:00 2001
From: Eric Lubin <eblubin@mit.edu>
Date: Thu, 12 Dec 2013 21:20:49 -0800
Subject: [PATCH 2717/2717] Fixed an unstable integer overflow check that was
 being optimized out by the compiler
In delete.c, the check to see if the seek will overflow the off_t is incorrect. 
Since off_t is a signed integer, we must respect the C standard that says signed integer overflow is undefined.
Consequently, the compiler is free to simplify such operations that might cause overflow. 
For example, it might perform the following optimization, thereby invalidating the overflow check. 

Given the following:

(position < position0) != (increment < 0) 

the compiler reads it as:
(position0 + increment < position0) != (increment < 0) 

Since the addition is with signed integers, it assumes they cannot overflow and thus simplifies this further to:

(increment < 0) != (increment < 0) 

Which is then simplified to false.

This undefined behavior optimization could potentially have security implications with any inputs that
would cause this overflow to occur, because the check is not being executed.
---
 src/delete.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/delete.c b/src/delete.c
index d17dd25..bd5c8d5 100644
--- a/src/delete.c
+++ b/src/delete.c
@@ -20,7 +20,7 @@
 
 #include <system.h>
 #include <system-ioctl.h>
-
+#include <limits.h>
 #include "common.h"
 #include <rmt.h>
 
@@ -79,7 +79,7 @@ move_archive (off_t count)
     off_t position = position0 + increment;
 
     if (increment / count != record_size
-	|| (position < position0) != (increment < 0)
+	|| (increment > LONG_MAX - position0) != (increment < 0)
 	|| (position = position < 0 ? 0 : position,
 	    rmtlseek (archive, position, SEEK_SET) != position))
       seek_error_details (archive_name_array[0], position);
-- 
1.7.9.5

